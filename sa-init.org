#+STARTIP: overview

# shortcut for

* Interface Tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)
  #+END_SRC

* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* Which Key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode)
    )
  #+END_SRC

* Org Mode
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC

* Ibuffer
  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)
  #+END_SRC

* Backup to one directory
  #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups"))))
  #+END_SRC

* Line Numbers
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 
              (lambda () (setq-local display-line-numbers 'visual)))
  #+END_SRC

* Tabs are evil
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (use-package dtrt-indent
      :ensure t)
  #+END_SRC

* Whitespace
  #+BEGIN_SRC emacs-lisp
    (setq-default show-trailing-whitespace t)
    (setq-default whitespace-line-colomn 80)
    (setq whitespace-style 
        '(face spaces tabs trailing lines-tail space-mark tab-mark))
    (global-whitespace-mode t)
    (set-face-attribute 'whitespace-line nil 
                        :background "#360000" :foreground nil)
  #+END_SRC

* Rainbow Delimiters
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :config
        (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
      )
  #+END_SRC

* Highlight Indentation
  #+BEGIN_SRC emacs-lisp
    (use-package highlight-indent-guides
      :ensure t
      :config
        (setq highlight-indent-guides-method 'character)
        (setq highlight-indent-guides-responsive 'stack)
        (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    )

;;    (defun my-highlighter (level responsive display)
;;      DeepSkyBlue
;;      DarkSeaGreen
;;      LightGoldenRod
;;      DarkOrange
;;      MediumOrchid

  #+END_SRC

* Ace Window
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
  ;; Suggested set faces that I didn't like
  ;;    (custom-set-faces
  ;;   '(aw-leading-char-face
  ;;     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
  #+END_SRC

* Theme
  #+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
      :ensure t)

    (load-theme 'dracula t)
  #+END_SRC

* Counsel
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
    :ensure t)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))
  #+END_SRC

* Swiper
  #+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
  #+END_SRC

* Auto Complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)
        ))
  #+END_SRC

* Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :ensure ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
      :ensure t)

  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))
  #+END_SRC

* Python
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :init
         (setq jedi:setup-keys t)
       :config
         (add-hook 'python-mode-hook 'jedi:setup)
         (add-hook 'python-mode-hook 'jedi:ac-setup)
         (setq jedi:complete-on-dot t)
      )

     (use-package elpy
       :ensure t
       :init
         (elpy-enable)
         (setq elpy-rpc-backend "jedi"))

   #+END_SRC

* YAsnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))
  #+END_SRC

* Evil mode (sorry Des)
  #+BEGIN_SRC emacs-lisp
    (unless (package-installed-p 'evil)
      (package-install ' evil))

    (require 'evil)
    (evil-mode 1)
    (setq-default evil-cross-lines t)
  #+END_SRC

