#+STARTIP: overview

# Notes to organise
  # Would be nice to have all key bindings under one header
  # Perhaps it's time to split into subheaders
# shortcut for

* Interface Tweaks
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    (column-number-mode 1)

    ;; Save place in each buffer when returning
    (save-place-mode 1)

    ;; Start at a maximum frame for the initial frame
    (add-to-list 'initial-frame-alist '(fullscreen . maximized))

    ;; Turn off annoying emacs beep but make it visible instead
    (setq visible-bell t)

    ;; Make it flash the mode line
    (use-package mode-line-bell
      :ensure t)

  #+END_SRC
* Start new frame as new emacs
  Useful when you're working on different Issues and you want the buffers to 
  remain Issue specific.
  Taken from https://emacs.stackexchange.com/a/117
  #+BEGIN_SRC emacs-lisp
    (defun start-other-emacs ()
      "Start another Emacs process to open an independent Emacs window."
      (interactive)
      ;;; Run the command "emacs", piping output into a 
      ;;; buffer called "*other-emacs*"
      (start-process "emacs" "*other-emacs*" "emacs"))
    (global-set-key (kbd "C-x 5 2") 'start-other-emacs)

  #+END_SRC
* Try
  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* Which Key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode)
    )
  #+END_SRC

* Org Mode
  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :init
        (require 'ox-md)
      :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+END_SRC

* Ibuffer
  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer)
  #+END_SRC

* Backup to one directory
  #+BEGIN_SRC emacs-lisp
     (setq backup-directory-alist
          `(("." . ,(concat user-emacs-directory "backups")))
)
  #+END_SRC

* Line Numbers
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook 
              (lambda () (setq-local display-line-numbers 'visual)))
  #+END_SRC

* Tabs are evil
  #+BEGIN_SRC emacs-lisp
    (setq-default indent-tabs-mode nil)
    (use-package dtrt-indent
      :ensure t)
  #+END_SRC

* Whitespace
  #+BEGIN_SRC emacs-lisp
    (setq-default show-trailing-whitespace t)
    (setq-default whitespace-line-colomn 80)
    (setq whitespace-style 
        '(face spaces tabs trailing lines-tail space-mark tab-mark)
    )
    (global-whitespace-mode t)
    (add-hook 'prog-mode-hook 
              (lambda () (set-face-attribute 'whitespace-line nil 
                          :background "#360000" :foreground nil)
     ))
  #+END_SRC

* Rainbow Delimiters
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :config
        (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
      )
  #+
* Highlight Indentation
  #+BEGIN_SRC emacs-lisp
    (use-package highlight-indent-guides
      :ensure t
      :config
        (setq highlight-indent-guides-method 'character)
        (setq highlight-indent-guides-responsive 'stack)
        (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    )

;;    (defun my-highlighter (level responsive display)
;;      DeepSkyBlue
;;      DarkSeaGreen
;;      LightGoldenRod
;;      DarkOrange
;;      MediumOrchid

  #+END_SRC

* Ace Window
  #+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
  ;; Suggested set faces that I didn't like
  ;;    (custom-set-faces
  ;;   '(aw-leading-char-face
  ;;     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
      ))
  #+END_SRC

* Theme
  #+BEGIN_SRC emacs-lisp
    (use-package dracula-theme
      :ensure t)

    (load-theme 'dracula t)
  #+END_SRC

* Counsel
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
    :ensure t)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))
  #+END_SRC

* Swiper
  #+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq enable-recursive-minibuffers t)
      ;; enable this if you want `swiper' to use it
      ;; (setq search-default-mode #'char-fold-to-regexp)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      ))
  #+END_SRC

* Auto Complete
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)
        ))
  #+END_SRC

* Reveal.js
  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :ensure ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
      :ensure t)

  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  #+END_SRC

* Python
   #+BEGIN_SRC emacs-lisp
;; For Elpy
;; (sudo) pip(3) install virtualenv
;; (sudo) pip(3) install jedi
     (use-package elpy
       :ensure t
       :init
         (elpy-enable)
         (setq elpy-rpc-backend "jedi")
         (setq elpy-rpc-virtualenv-path 'current)
     )

;; For elpy to use flycheck
  (when (load "flycheck" t t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

   #+END_SRC

* Web Stuff
** Json
  #+BEGIN_EXPORT emacs-lisp
    (use-package json-mode
      :ensure t)
  #+END_EXPORT
** Multi web editing
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t)

#+END_SRC
* YAsnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
      (yas-global-mode 1))
  #+END_SRC

* Evil mode (sorry Des)
  #+BEGIN_SRC emacs-lisp
    (use-package evil
       :ensure t
       :config
          (evil-mode 1)
          (setq-default evil-cross-lines t)
    )
  #+END_SRC

* Remember Window Config
  #+BEGIN_SRC emacs-lisp
    (desktop-save-mode 1)
  #+END_SRC

* Sort These nicely soon
  # Taken from https://krsoninikhil.github.io/2018/12/15/easy-moving-from-vscode-to-emacs/
** Duplicate Line 
#+BEGIN_SRC emacs-lisp
 (defun duplicate-line ()
   (interactive)
   (save-mark-and-excursion
     (beginning-of-line)
     (insert (thing-at-point 'line t))))

 (global-set-key (kbd "C-S-d") 'duplicate-line)

#+END_SRC

** Up Down by one line
#+BEGIN_SRC emacs-lisp
 (defun move-line-down ()
   (interactive)
   (let ((col (current-column)))
     (save-excursion
       (forward-line)
       (transpose-lines 1))
     (forward-line)
     (move-to-column col)))

 (defun move-line-up ()
   (interactive)
   (let ((col (current-column)))
     (save-excursion
       (forward-line)
       (transpose-lines -1))
     (forward-line -1)
     (move-to-column col)))

 (global-set-key (kbd "C-S-j") 'move-line-down)
 (global-set-key (kbd "C-S-k") 'move-line-up)

#+END_SRC

** Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t)
  (global-set-key (kbd "C-|") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
  (define-key mc/keymap (kbd "<return>") nil)

#+END_SRC


# Other stuff
** Reload Buffer on file change if buffer is not changed
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)

#+END_SRC
** Evil Commentary
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :ensure t)
  (evil-commentary-mode)

#+END_SRC
